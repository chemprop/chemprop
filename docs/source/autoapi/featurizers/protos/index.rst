:py:mod:`featurizers.protos`
============================

.. py:module:: featurizers.protos


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   featurizers.protos.MolGraphFeaturizerProto
   featurizers.protos.MoleculeMolGraphFeaturizerProto
   featurizers.protos.RxnMolGraphFeaturizerProto
   featurizers.protos.AtomFeaturizerProto
   featurizers.protos.BondFeaturizerProto
   featurizers.protos.MoleculeFeaturizerProto




.. py:class:: MolGraphFeaturizerProto


   Bases: :py:obj:`Protocol`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing), for example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto(Protocol[T]):
           def meth(self) -> T:
               ...

   .. py:property:: shape
      :type: tuple[int, int]

      the feature dimensions of the atoms and bonds, respectively, of :class:`MolGraph`s
      generated by this featurizer

   .. py:method:: __call__(*args, **kwargs)



.. py:class:: MoleculeMolGraphFeaturizerProto


   Bases: :py:obj:`MolGraphFeaturizerProto`

   A :class:`MoleculeMolGraphFeaturizerProto` featurizes RDKit molecules into
   :class:`MolGraph`s

   .. py:method:: __call__(mol, atom_features_extra = None, bond_features_extra = None)

      Featurize the input molecule into a molecular graph

      :param mol: the input molecule
      :type mol: Chem.Mol
      :param atom_features_extra: Additional features to concatenate to the calculated atom features
      :type atom_features_extra: np.ndarray | None, default=None
      :param bond_features_extra: Additional features to concatenate to the calculated bond features
      :type bond_features_extra: np.ndarray | None, default=None

      :returns: the molecular graph of the molecule
      :rtype: MolGraph



.. py:class:: RxnMolGraphFeaturizerProto


   Bases: :py:obj:`MolGraphFeaturizerProto`

   A :class:`RxnMolGraphFeaturizerProto` featurizes reactions (i.e., a 2-tuple of reactant
   and product molecules) into :class:`MolGraph`s

   .. py:method:: __call__(rxn, atom_features_extra = None, bond_features_extra = None)

      Featurize the input reaction into a molecular graph

      :param rxn: a 2-tuple of atom-mapped rdkit molecules, where the 0th element is the reactant and the
                  1st element is the product
      :type rxn: tuple[Chem.Mol, Chem.Mol]
      :param atom_features_extra: *UNSUPPORTED* maintained only to maintain parity with the method signature of the
                                  `MoleculeFeaturizer`
      :type atom_features_extra: np.ndarray | None, default=None
      :param bond_features_extra: *UNSUPPORTED* maintained only to maintain parity with the method signature of the
                                  `MoleculeFeaturizer`
      :type bond_features_extra: np.ndarray | None, default=None

      :returns: the molecular graph of the reaction
      :rtype: MolGraph



.. py:class:: AtomFeaturizerProto


   Bases: :py:obj:`Protocol`

   An :class:`AtomFeaturizerProto` calculates feature vectors of RDKit atoms.

   .. py:method:: __len__()

      the length of an atomic feature vector


   .. py:method:: __call__(a)

      featurize the atom ``a``



.. py:class:: BondFeaturizerProto


   Bases: :py:obj:`Protocol`

   A :class:`BondFeaturizerProto` calculates feature vectors of RDKit bonds

   .. py:method:: __len__()

      the length of a bond feature vector


   .. py:method:: __call__(b)

      featurize the bond ``b``



.. py:class:: MoleculeFeaturizerProto


   Bases: :py:obj:`Protocol`

   A :class:`MoleculeFeaturizerProto` calculates feature vectors of RDKit molecules.

   .. py:method:: __len__()

      the length of the feature vector


   .. py:method:: __call__(mol)

      Featurize the molecule ``mol``



