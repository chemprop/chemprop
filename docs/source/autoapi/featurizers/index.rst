:py:mod:`featurizers`
=====================

.. py:module:: featurizers


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   atom/index.rst
   bond/index.rst
   featurizers/index.rst
   mixins/index.rst
   molecule/index.rst
   molgraph/index.rst
   protos/index.rst
   reaction/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   featurizers.MolGraphFeaturizerProto
   featurizers.MoleculeMolGraphFeaturizerProto
   featurizers.RxnMolGraphFeaturizerProto
   featurizers.AtomFeaturizerProto
   featurizers.BondFeaturizerProto
   featurizers.MoleculeFeaturizerProto
   featurizers.AtomFeaturizer
   featurizers.BondFeaturizer
   featurizers.MolGraph
   featurizers.BatchMolGraph
   featurizers.MoleculeMolGraphFeaturizer
   featurizers.RxnMolGraphFeaturizer
   featurizers.RxnMode




.. py:class:: MolGraphFeaturizerProto


   Bases: :py:obj:`Protocol`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing), for example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto(Protocol[T]):
           def meth(self) -> T:
               ...

   .. py:property:: shape
      :type: tuple[int, int]

      the feature dimensions of the atoms and bonds, respectively, of :class:`MolGraph`s
      generated by this featurizer

   .. py:method:: __call__(*args, **kwargs)



.. py:class:: MoleculeMolGraphFeaturizerProto


   Bases: :py:obj:`MolGraphFeaturizerProto`

   A :class:`MoleculeMolGraphFeaturizerProto` featurizes RDKit molecules into
   :class:`MolGraph`s

   .. py:method:: __call__(mol, atom_features_extra = None, bond_features_extra = None)

      Featurize the input molecule into a molecular graph

      :param mol: the input molecule
      :type mol: Chem.Mol
      :param atom_features_extra: Additional features to concatenate to the calculated atom features
      :type atom_features_extra: np.ndarray | None, default=None
      :param bond_features_extra: Additional features to concatenate to the calculated bond features
      :type bond_features_extra: np.ndarray | None, default=None

      :returns: the molecular graph of the molecule
      :rtype: MolGraph



.. py:class:: RxnMolGraphFeaturizerProto


   Bases: :py:obj:`MolGraphFeaturizerProto`

   A :class:`RxnMolGraphFeaturizerProto` featurizes reactions (i.e., a 2-tuple of reactant
   and product molecules) into :class:`MolGraph`s

   .. py:method:: __call__(rxn, atom_features_extra = None, bond_features_extra = None)

      Featurize the input reaction into a molecular graph

      :param rxn: a 2-tuple of atom-mapped rdkit molecules, where the 0th element is the reactant and the
                  1st element is the product
      :type rxn: tuple[Chem.Mol, Chem.Mol]
      :param atom_features_extra: *UNSUPPORTED* maintained only to maintain parity with the method signature of the
                                  `MoleculeFeaturizer`
      :type atom_features_extra: np.ndarray | None, default=None
      :param bond_features_extra: *UNSUPPORTED* maintained only to maintain parity with the method signature of the
                                  `MoleculeFeaturizer`
      :type bond_features_extra: np.ndarray | None, default=None

      :returns: the molecular graph of the reaction
      :rtype: MolGraph



.. py:class:: AtomFeaturizerProto


   Bases: :py:obj:`Protocol`

   An :class:`AtomFeaturizerProto` calculates feature vectors of RDKit atoms.

   .. py:method:: __len__()

      the length of an atomic feature vector


   .. py:method:: __call__(a)

      featurize the atom ``a``



.. py:class:: BondFeaturizerProto


   Bases: :py:obj:`Protocol`

   A :class:`BondFeaturizerProto` calculates feature vectors of RDKit bonds

   .. py:method:: __len__()

      the length of a bond feature vector


   .. py:method:: __call__(b)

      featurize the bond ``b``



.. py:class:: MoleculeFeaturizerProto


   Bases: :py:obj:`Protocol`

   A :class:`MoleculeFeaturizerProto` calculates feature vectors of RDKit molecules.

   .. py:method:: __len__()

      the length of the feature vector


   .. py:method:: __call__(mol)

      Featurize the molecule ``mol``



.. py:class:: AtomFeaturizer


   Bases: :py:obj:`chemprop.v2.featurizers.protos.AtomFeaturizerProto`

   An :class:`AtomFeaturizer` featurizes atoms based on the following attributes:

   * atomic number
   * degree
   * formal charge
   * chiral tag
   * number of hydrogens
   * hybridization
   * aromaticity
   * mass

   The feature vectors produced by this featurizer have the following (general) signature:

   +---------------------+-----------------+--------------+
   | slice [start, stop) | subfeature      | unknown pad? |
   +=====================+=================+==============+
   | 0-101               | atomic number   | Y            |
   +---------------------+-----------------+--------------+
   | 101-108             | degree          | Y            |
   +---------------------+-----------------+--------------+
   | 108-114             | formal charge   | Y            |
   +---------------------+-----------------+--------------+
   | 114-119             | chiral tag      | Y            |
   +---------------------+-----------------+--------------+
   | 119-125             | # Hs            | Y            |
   +---------------------+-----------------+--------------+
   | 125-131             | hybridization   | Y            |
   +---------------------+-----------------+--------------+
   | 131-132             | aromatic?       | N            |
   +---------------------+-----------------+--------------+
   | 132-133             | mass            | N            |
   +---------------------+-----------------+--------------+

   NOTE: the above signature only applies for the default arguments, as the each slice (save for
   the final two) can increase in size depending on the input arguments.

   .. py:attribute:: max_atomic_num
      :type: dataclasses.InitVar[int]
      :value: 100

      

   .. py:attribute:: degrees
      :type: Sequence[int]

      

   .. py:attribute:: formal_charges
      :type: Sequence[int]

      

   .. py:attribute:: chiral_tags
      :type: Sequence[int]

      

   .. py:attribute:: num_Hs
      :type: Sequence[int]

      

   .. py:attribute:: hybridizations
      :type: Sequence[rdkit.Chem.rdchem.HybridizationType]

      

   .. py:method:: __post_init__(max_atomic_num = 100)


   .. py:method:: __len__()

      the length of an atomic feature vector


   .. py:method:: __call__(a)

      featurize the atom ``a``


   .. py:method:: num_only(a)

      featurize the atom by setting only the atomic number bit



.. py:class:: BondFeaturizer(bond_types = None, stereos = None)


   Bases: :py:obj:`chemprop.v2.featurizers.protos.BondFeaturizerProto`

   A :class:`BondFeaturizer` feauturizes bonds based on the following attributes:

   * ``null``-ity (i.e., is the bond ``None``?)
   * bond type
   * conjugated?
   * in ring?
   * stereochemistry

   The feature vectors produced by this featurizer have the following (general) signature:

   +---------------------+-----------------+--------------+
   | slice [start, stop) | subfeature      | unknown pad? |
   +=====================+=================+==============+
   | 0-1                 | null?           | N            |
   +---------------------+-----------------+--------------+
   | 1-5                 | bond type       | N            |
   +---------------------+-----------------+--------------+
   | 5-6                 | conjugated?     | N            |
   +---------------------+-----------------+--------------+
   | 6-8                 | in ring?        | N            |
   +---------------------+-----------------+--------------+
   | 7-14                | stereochemistry | Y            |
   +---------------------+-----------------+--------------+

   **NOTE**: the above signature only applies for the default arguments, as the bond type and
   sterochemistry slices can increase in size depending on the input arguments.

   :param bond_types: the known bond types
   :type bond_types: Sequence[BondType] | None, default=[SINGLE, DOUBLE, TRIPLE, AROMATIC]
   :param stereos: the known bond stereochemistries. See [1]_ for more details
   :type stereos: Sequence[int] | None, default=[0, 1, 2, 3, 4, 5]

   .. rubric:: References

   .. [1] https://www.rdkit.org/docs/source/rdkit.Chem.rdchem.html#rdkit.Chem.rdchem.BondStereo.values

   .. py:method:: __len__()

      the length of a bond feature vector


   .. py:method:: __call__(b)

      featurize the bond ``b``


   .. py:method:: one_hot_index(x, xs)
      :classmethod:

      the index of ``x`` in ``xs``, if it exists. Otherwise, return ``len(xs) + 1``.



.. py:class:: MolGraph


   Bases: :py:obj:`NamedTuple`

   A :class:`MolGraph` represents the graph featurization of a molecule.

   .. py:attribute:: n_atoms
      :type: int

      the number of atoms in the molecule

   .. py:attribute:: n_bonds
      :type: int

      the number of bonds in the molecule

   .. py:attribute:: V
      :type: numpy.ndarray

      an array of shape `V x d_v` containing the atom features of the molecule

   .. py:attribute:: E
      :type: numpy.ndarray

      an array of shape `E x d_e` containing the bond features of the molecule

   .. py:attribute:: a2b
      :type: list[tuple[int]]

      A list of length `V` that maps from an atom index to a list of incoming bond indices.

   .. py:attribute:: b2a
      :type: list[int]

      A list of length `E` that maps from a bond index to the index of the atom the bond
      originates from.

   .. py:attribute:: b2revb
      :type: numpy.ndarray

      A list of length `E` that maps from a bond index to the index of the reverse bond.

   .. py:attribute:: a2a
      :type: list[int] | None

      a mapping from atom index to the indices of connected atoms

   .. py:attribute:: b2b
      :type: numpy.ndarray | None

      a mapping from bond index to the indices of connected bonds


.. py:class:: BatchMolGraph


   A :class:`BatchMolGraph` represents a batch of individual :class:`MolGraph`s.

   It has all the attributes of a `MolGraph` with the addition of `a_scope` and `b_scope`. These
   define the respective atom- and bond-scope of each individual `MolGraph` within the
   `BatchMolGraph`. This class is intended for use with data loading, so it uses
   :obj:`~torch.Tensor`s to store data

   .. py:attribute:: mgs
      :type: dataclasses.InitVar[Sequence[MolGraph]]

      A list of individual :class:`MolGraph`s to be batched together

   .. py:attribute:: n_atoms
      :type: int

      the number of atoms in the batched graph

   .. py:attribute:: n_bonds
      :type: int

      the number of bonds in the batched graph

   .. py:attribute:: V
      :type: torch.Tensor

      the atom feature matrix

   .. py:attribute:: E
      :type: torch.Tensor

      the bond feature matrix

   .. py:attribute:: a2b
      :type: torch.Tensor

      a mapping from atom index to indices of incoming bonds

   .. py:attribute:: b2a
      :type: torch.Tensor

      a mapping from bond index to index of the originating atom

   .. py:attribute:: b2revb
      :type: torch.Tensor

      A mapping from bond index to the index of the reverse bond.

   .. py:attribute:: a2a
      :type: torch.Tensor | None

      a mapping from atom index to the indices of connected atoms

   .. py:attribute:: b2b
      :type: torch.Tensor | None

      a mapping from bond index to the indices of connected bonds

   .. py:attribute:: a_scope
      :type: list[int]

      the number of atoms for each molecule in the batch

   .. py:attribute:: b_scope
      :type: list[int]

      the number of bonds for each molecule in the batch

   .. py:method:: __post_init__(mgs)


   .. py:method:: __len__()

      the number of individual :class:`MolGraph`s in this batch


   .. py:method:: to(device)



.. py:class:: MoleculeMolGraphFeaturizer


   Bases: :py:obj:`chemprop.v2.featurizers.mixins.MolGraphFeaturizerMixin`, :py:obj:`chemprop.v2.featurizers.protos.MoleculeMolGraphFeaturizerProto`

   A :class:`MoleculeMolGraphFeaturizer` is the default implementation of a
   :class:`MoleculeMolGraphFeaturizerProto`

   :param atom_featurizer: the featurizer with which to calculate feature representations of the atoms in a given
                           molecule
   :type atom_featurizer: AtomFeaturizerProto, default=AtomFeaturizer()
   :param bond_featurizer: the featurizer with which to calculate feature representations of the bonds in a given
                           molecule
   :type bond_featurizer: BondFeaturizerProto, default=BondFeaturizer()
   :param bond_messages: whether to prepare the `MolGraph`s for use with message passing on bonds
   :type bond_messages: bool, default=True
   :param extra_atom_fdim: the dimension of the additional features that will be concatenated onto the calculated
                           features of each atom
   :type extra_atom_fdim: int, default=0
   :param extra_bond_fdim: the dimension of the additional features that will be concatenated onto the calculated
                           features of each bond
   :type extra_bond_fdim: int, default=0

   .. py:attribute:: extra_atom_fdim
      :type: dataclasses.InitVar[int]
      :value: 0

      

   .. py:attribute:: extra_bond_fdim
      :type: dataclasses.InitVar[int]
      :value: 0

      

   .. py:method:: __post_init__(extra_atom_fdim = 0, extra_bond_fdim = 0)


   .. py:method:: __call__(mol, atom_features_extra = None, bond_features_extra = None)

      Featurize the input molecule into a molecular graph

      :param mol: the input molecule
      :type mol: Chem.Mol
      :param atom_features_extra: Additional features to concatenate to the calculated atom features
      :type atom_features_extra: np.ndarray | None, default=None
      :param bond_features_extra: Additional features to concatenate to the calculated bond features
      :type bond_features_extra: np.ndarray | None, default=None

      :returns: the molecular graph of the molecule
      :rtype: MolGraph



.. py:class:: RxnMolGraphFeaturizer


   Bases: :py:obj:`chemprop.v2.featurizers.mixins.MolGraphFeaturizerMixin`, :py:obj:`chemprop.v2.featurizers.protos.RxnMolGraphFeaturizerProto`

   A :class:`ReactionMolGraphFeaturizer` featurizes reactions using the condensed reaction graph method utilized in [1]_

   **NOTE**: This class *does not* accept a :class:`AtomFeaturizerProto` instance. This is because
   it requries the :meth:`num_only()` method, which is only implemented in the concrete
   :class:`AtomFeaturizer` class

   :param atom_featurizer: the featurizer with which to calculate feature representations of the atoms in a given
                           molecule
   :type atom_featurizer: AtomFeaturizer, default=AtomFeaturizer()
   :param bond_featurizer: the featurizer with which to calculate feature representations of the bonds in a given
                           molecule
   :type bond_featurizer: BondFeaturizerBase, default=BondFeaturizer()
   :param bond_messages: whether to prepare the `MolGraph`s for use with bond-based message-passing
   :type bond_messages: bool, default=True
   :param mode: the mode by which to featurize the reaction as either the string code or enum value
   :type mode: Union[str, ReactionMode], default=ReactionMode.REAC_DIFF

   .. rubric:: References

   .. [1] Heid, E.; Green, W.H. "Machine Learning of Reaction Properties via Learned
       Representations of the Condensed Graph of Reaction." J. Chem. Inf. Model. 2022, 62,
       2101-2110. https://doi.org/10.1021/acs.jcim.1c00975

   .. py:property:: mode
      :type: RxnMode


   .. py:attribute:: mode_
      :type: dataclasses.InitVar[str | RxnMode]

      

   .. py:method:: __post_init__(mode_)


   .. py:method:: featurize(rxn, atom_features_extra = None, bond_features_extra = None)


   .. py:method:: map_reac_to_prod(reactants, products)
      :classmethod:

      Map atom indices between corresponding atoms in the reactant and product molecules

      :param reactants: An RDKit molecule of the reactants
      :type reactants: Chem.Mol
      :param products: An RDKit molecule of the products
      :type products: Chem.Mol

      :returns: * **ri2pi** (*dict[int, int]*) -- A dictionary of corresponding atom indices from reactant atoms to product atoms
                * **pdt_idxs** (*list[int]*) -- atom indices of poduct atoms
                * **rct_idxs** (*list[int]*) -- atom indices of reactant atoms



.. py:class:: RxnMode(*args, **kwds)


   Bases: :py:obj:`chemprop.v2.utils.utils.AutoName`

   The mode by which a reaction should be featurized into a `MolGraph`

   .. py:attribute:: REAC_PROD

      concatenate the reactant features with the product features.

   .. py:attribute:: REAC_PROD_BALANCE

      concatenate the reactant features with the products feature and balances imbalanced
      reactions

   .. py:attribute:: REAC_DIFF

      concatenates the reactant features with the difference in features between reactants and
      products

   .. py:attribute:: REAC_DIFF_BALANCE

      concatenates the reactant features with the difference in features between reactants and
      product and balances imbalanced reactions

   .. py:attribute:: PROD_DIFF

      concatenates the product features with the difference in features between reactants and
      products

   .. py:attribute:: PROD_DIFF_BALANCE

      concatenates the product features with the difference in features between reactants and
      products and balances imbalanced reactions


