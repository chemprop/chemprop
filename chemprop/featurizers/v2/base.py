from abc import ABC, abstractmethod
from typing import Optional, Union

import numpy as np
from rdkit import Chem

from chemprop.featurizers.v2.molgraph import MolGraph
from chemprop.featurizers.v2.multihot.atom import AtomFeaturizer
from chemprop.featurizers.v2.multihot.bond import BondFeaturizer


class MolGraphFeaturizer(ABC):
    def __init__(
        self,
        atom_featurizer: Optional[AtomFeaturizer] = None,
        bond_featurizer: Optional[BondFeaturizer] = None,
        bond_messages: bool = False,
        *args,
        **kwargs,
    ):
        self.atom_featurizer = atom_featurizer or AtomFeaturizer()
        self.bond_featurizer = bond_featurizer or BondFeaturizer()
        self.atom_fdim = len(self.atom_featurizer)
        self.bond_fdim = len(self.bond_featurizer)
        self.bond_messages = bond_messages

    def __call__(self, *args, **kwargs) -> MolGraph:
        return self.featurize(*args, **kwargs)

    @property
    def shape(self) -> tuple[int, int]:
        """the feature dimension of the atoms and bonds, respectively, of `MolGraph`s generated by
        this featurizer"""
        return self.atom_fdim, self.bond_fdim

    @abstractmethod
    def featurize(
        self,
        mol_or_reaction: Union[Chem.Mol, tuple[Chem.Mol, Chem.Mol]],
        atom_features_extra: Optional[np.ndarray] = None,
        bond_features_extra: Optional[np.ndarray] = None,
    ) -> MolGraph:
        pass
