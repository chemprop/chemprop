from typing import Protocol

import numpy as np
from rdkit import Chem

from chemprop.v2.featurizers.molgraph import MolGraph


class MolGraphFeaturizerProto(Protocol):
    def __call__(self, *args, **kwargs) -> MolGraph:
        pass

    @property
    def shape(self) -> tuple[int, int]:
        """the feature dimensions of the atoms and bonds, respectively, of :class:`MolGraph`s
        generated by this featurizer"""


class MoleculeMolGraphFeaturizerProto(MolGraphFeaturizerProto):
    """A :class:`MoleculeMolGraphFeaturizerProto` featurizes RDKit molecules into
    :class:`MolGraph`s"""

    def __call__(
        self,
        mol: Chem.Mol,
        atom_features_extra: np.ndarray | None = None,
        bond_features_extra: np.ndarray | None = None,
    ) -> MolGraph:
        """Featurize the input molecule into a molecular graph

        Parameters
        ----------
        mol : Chem.Mol
            the input molecule
        atom_features_extra : np.ndarray | None, default=None
            Additional features to concatenate to the calculated atom features
        bond_features_extra : np.ndarray | None, default=None
            Additional features to concatenate to the calculated bond features

        Returns
        -------
        MolGraph
            the molecular graph of the molecule
        """


class RxnMolGraphFeaturizerProto(MolGraphFeaturizerProto):
    """A :class:`RxnMolGraphFeaturizerProto` featurizes reactions (i.e., a 2-tuple of reactant
    and product molecules) into :class:`MolGraph`s"""

    def __call__(
        self,
        rxn: tuple[Chem.Mol, Chem.Mol],
        atom_features_extra: np.ndarray | None = None,
        bond_features_extra: np.ndarray | None = None,
    ) -> MolGraph:
        """Featurize the input reaction into a molecular graph

        Parameters
        ----------
        rxn : tuple[Chem.Mol, Chem.Mol]
            a 2-tuple of atom-mapped rdkit molecules, where the 0th element is the reactant and the
            1st element is the product
        atom_features_extra : np.ndarray | None, default=None
            *UNSUPPORTED* maintained only to maintain parity with the method signature of the
            `MoleculeFeaturizer`
        bond_features_extra : np.ndarray | None, default=None
            *UNSUPPORTED* maintained only to maintain parity with the method signature of the
            `MoleculeFeaturizer`

        Returns
        -------
        MolGraph
            the molecular graph of the reaction
        """

        
class AtomFeaturizerProto(Protocol):
    """An :class:`AtomFeaturizerProto` calculates feature vectors of RDKit atoms."""

    def __len__(self) -> int:
        """the length of an atomic feature vector"""

    def __call__(self, a: Chem.Atom) -> np.ndarray:
        """featurize the atom ``a``"""


class BondFeaturizerProto(Protocol):
    """A :class:`BondFeaturizerProto` calculates feature vectors of RDKit bonds"""

    def __len__(self) -> int:
        """the length of a bond feature vector"""

    def __call__(self, b: Chem.Bond) -> np.ndarray:
        """featurize the bond ``b``"""


class MoleculeFeaturizerProto(Protocol):
    """A :class:`MoleculeFeaturizerProto` calculates feature vectors of RDKit molecules."""

    def __len__(self) -> int:
        """the length of the feature vector"""

    def __call__(self, mol: Chem.Mol) -> np.ndarray:
        """Featurize the molecule ``mol``"""
